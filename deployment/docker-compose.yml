version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sleepr-postgres
    environment:
      POSTGRES_DB: sleepr
      POSTGRES_USER: sleepr_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sleepr_user -d sleepr"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - sleepr-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sleepr-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - sleepr-network

  # Go API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: sleepr-api
    environment:
      DATABASE_URL: postgres://sleepr_user:${POSTGRES_PASSWORD}@postgres:5432/sleepr?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 8080
      ENV: production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - sleepr-network

  # Python Analytics Service
  analytics:
    build:
      context: ./analytics
      dockerfile: Dockerfile
    container_name: sleepr-analytics
    environment:
      DATABASE_URL: postgres://sleepr_user:${POSTGRES_PASSWORD}@postgres:5432/sleepr?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      API_URL: http://api:8080
      PORT: 8001
      ENV: production
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - sleepr-network

  # React Frontend
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8080/api/v1
        REACT_APP_ANALYTICS_URL: http://localhost:8001
    container_name: sleepr-frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
      - analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - sleepr-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sleepr-nginx
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
      - analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - sleepr-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sleepr-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - sleepr-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sleepr-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sleepr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sleepr-network:
    driver: bridge
