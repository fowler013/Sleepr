apiVersion: v1
kind: Namespace
metadata:
  name: sleepr
---
apiVersion: v1
kind: Secret
metadata:
  name: sleepr-secrets
  namespace: sleepr
type: Opaque
data:
  postgres-password: cGFzc3dvcmQxMjM=  # base64 encoded 'password123'
  redis-password: cmVkaXMxMjM=  # base64 encoded 'redis123'
  jwt-secret: c3VwZXJzZWNyZXRqd3RrZXk=  # base64 encoded 'supersecretjwtkey'
  grafana-password: Z3JhZmFuYTEyMw==  # base64 encoded 'grafana123'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sleepr-config
  namespace: sleepr
data:
  api-port: "8080"
  analytics-port: "8001"
  frontend-port: "3000"
  environment: "production"
  log-level: "INFO"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: sleepr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: sleepr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: sleepr
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "sleepr"
        - name: POSTGRES_USER
          value: "sleepr_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sleepr_user
            - -d
            - sleepr
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sleepr_user
            - -d
            - sleepr
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: sleepr
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sleepr
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: sleepr
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sleepr-api
  namespace: sleepr
  labels:
    app: sleepr-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sleepr-api
  template:
    metadata:
      labels:
        app: sleepr-api
    spec:
      containers:
      - name: api
        image: sleepr-api:latest
        ports:
        - containerPort: 8080
        env:
        - name: DATABASE_URL
          value: "postgres://sleepr_user:$(POSTGRES_PASSWORD)@postgres-service:5432/sleepr?sslmode=disable"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: jwt-secret
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: sleepr-config
              key: api-port
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: sleepr-config
              key: environment
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: redis-password
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: sleepr
spec:
  selector:
    app: sleepr-api
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sleepr-analytics
  namespace: sleepr
  labels:
    app: sleepr-analytics
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sleepr-analytics
  template:
    metadata:
      labels:
        app: sleepr-analytics
    spec:
      containers:
      - name: analytics
        image: sleepr-analytics:latest
        ports:
        - containerPort: 8001
        env:
        - name: DATABASE_URL
          value: "postgres://sleepr_user:$(POSTGRES_PASSWORD)@postgres-service:5432/sleepr?sslmode=disable"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: API_URL
          value: "http://api-service:8080"
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: sleepr-config
              key: analytics-port
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: sleepr-config
              key: environment
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sleepr-secrets
              key: redis-password
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: sleepr
spec:
  selector:
    app: sleepr-analytics
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sleepr-frontend
  namespace: sleepr
  labels:
    app: sleepr-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sleepr-frontend
  template:
    metadata:
      labels:
        app: sleepr-frontend
    spec:
      containers:
      - name: frontend
        image: sleepr-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_API_URL
          value: "http://api-service:8080/api/v1"
        - name: REACT_APP_ANALYTICS_URL
          value: "http://analytics-service:8001"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: sleepr
spec:
  selector:
    app: sleepr-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sleepr-ingress
  namespace: sleepr
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  tls:
  - hosts:
    - sleepr.example.com
    - api.sleepr.example.com
    - analytics.sleepr.example.com
    secretName: sleepr-tls
  rules:
  - host: sleepr.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  - host: api.sleepr.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 8080
  - host: analytics.sleepr.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: analytics-service
            port:
              number: 8001
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-hpa
  namespace: sleepr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sleepr-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: analytics-hpa
  namespace: sleepr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sleepr-analytics
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
